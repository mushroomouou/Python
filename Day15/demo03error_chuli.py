# 对于有时会出现错误的代码区块我们可以采用try-except语句来使用以避免错误的发生以及阻碍整个程序的完整进行
# 如果出现错误这时不会出现让用户感到迷惑的traceback  而是输出你期待让用户看到的东西
# 所以这才成就了try except 的厉害
# try:
#     print(5 / 0)
# except ZeroDivisionError:  # 注意看  这里except后面直接接的是error的名称！！  按照规则替换 才可以出现想要的结果
#     print('零是不可以作为分母的！！！')
# 如果try代码块中的代码正常的话就会直接运行
# 如果tru代码块中的代码出现了错误那么就会去寻找像except这样的代码块去执行
# 如果没找到except的话就会去报错  使用traceback

# 下面的是一个简单的除法计算程序

print('这里是除法运算的程序')
print('如果你在任何时候想要退出，请输入’q‘')
try:
    a = input('请输入被除数：')
    if a == 'q':
        exit()
    b = input('请输入除数：')
    if b == 'q':
        exit()
    c = int(a) / int(b)
except ZeroDivisionError:
    print('抱歉哦，我们这里不能把0作为除数哦！！')
else:
    print(c)


# 发现问题b在用户使用时会出现0作分母的情况
# 故应当使用try except

# 好处：对待用户相当的友好
#       防止了泄露代码信息的可能

# 更新后注意得使用else语句把所有的只有成功才执行的代码区块放入其中！！！！

# 很多时候你并不希望程序报错  而是希望程序对于错误的代码能够视而不见  就是增加其容错率


